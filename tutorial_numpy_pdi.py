# -*- coding: utf-8 -*-
"""Tutorial_NumPy_PDI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hejlk8qm8QZlzT7KGZKxWdQT-8S47Jsr

Universidade Federal de Alagoas

Instituto de Computação - IC

Processamento Digital de Imagens - PDI

Professor: Thiago Vieira

Alunos: João da Silva Muniz Neto
"""

import numpy as ny

"""# ***NumPy Array***

How to create an empty and a full NumPy array?
"""

y = ny.empty(0)
print(y)
print("---------------")
y = ny.full(shape=(3,4), fill_value=6)
print(y)

"""Create a Numpy array filled with all zeros"""

y = ny.zeros((4,3))
print(y)

"""Create a Numpy array filled with all ones"""

y = ny.ones((4,3))
print(y)

"""Check whether a Numpy array contains a specified row"""

[1, 1, 1] in y.tolist()

"""How to Remove rows in Numpy array that contains non-numeric values?"""

y = ny.array([[11, 2.5, 8],
                  [4.1, ny.nan, ny.nan]])

print(y[~ny.isnan(y).any(axis=1)])

"""Remove single-dimensional entries from the shape of an array"""

y = ny.zeros((6, 2, 1))
print(ny.squeeze(y).shape)

"""Find the number of occurrences of a sequence in a NumPy array"""

y = ny.array([[6, 23, 1, 3], 
                   [4, 4, 7, 4],
                   [1, 2, 3, 7],
                   [6, 9, 8, 3]])
  

repr(y).count("6, 4")

"""Find the most frequent value in a NumPy array"""

y = ny.array([4,4,4,4,5,1,2,2,1,1])
print(ny.bincount(y).argmax())

"""Combining a one and a two-dimensional NumPy Array"""

y1d = ny.arange(5)
  
y2d = ny.arange(10).reshape(2,5)
  

for a, b in ny.nditer([y1d, y2d]):
    print("%d:%d" % (a, b),)

"""How to build an array of all combinations of two NumPy arrays?"""

y1 = ny.array([6, 3])
y2 = ny.array([2, 1])

y = ny.array(ny.meshgrid(y1, y2)).T.reshape(-1, 2)
  
print(y)

"""How to add a border around a NumPy array?"""

y = ny.ones((4, 4))

y = ny.pad(y, pad_width=1, mode='constant',
               constant_values=0)
  
print(y)

"""How to compare two NumPy arrays?"""

y = ny.array([[1, 2], [3, 4]])
y2 = ny.array([[1, 2], [3, 4]])
 
comp = y == y2
equal = comp.all()
 
print(equal)

"""How to check whether specified values are present in NumPy array?"""

y = ny.array([[6, 2, 1],
                    [3, 8, 1]])


print(3 in y)
print(1 in y)
print(6 in y)
print(89 in y)
print(4 in y)

"""How to get all 2D diagonals of a 3D NumPy array?"""

y = ny.arange(3 * 4 * 4).reshape(3, 4, 4)
print("3d array:\n", y)

y2 = ny.diagonal(y, 
                       axis1 = 1,
                       axis2 = 2)
print("2d array:") 
print(y2)

"""Flatten a Matrix in Python using NumPy"""

y = ny.array([[6, 23], [55, 89]])
  
y2 = y.flatten()
print(y2)

"""Flatten a 2d numpy array into 1d array"""

y = ny.array([[6, 6, 6], [6, 6, 6], [6, 6, 6]])
  

  

yresul = y.flatten()
  

print("Novo array: ", yresul)

"""Move axes of an array to new positions"""

y = ny.zeros((6, 7, 6))
print(ny.moveaxis(y, 0, -1).shape)
print(ny.moveaxis(y, -1, 0).shape)

"""Interchange two axes of an array"""

y = ny.array([[6,7,8]])
print(y)
y2 =  ny.swapaxes(y,0,1)
print(y2)

"""NumPy – Fibonacci Series using Binet Formula"""

y = ny.arange(1, 11)
lengthY = len(y)
  

sqrtFive = ny.sqrt(5)
alpha = (1 + sqrtFive) / 2
beta = (1 - sqrtFive) / 2
  

Fn = ny.rint(((alpha ** y) - (beta ** y)) / (sqrtFive))
print("Primeiros {} números de Fibonacci {} .".format(lengthY, Fn))

"""Counts the number of non-zero values in the array"""

y=ny.array([[1,0,11,0],[4,0,0,0],[32,1,2,0]])

ny.count_nonzero(y)

"""Count the number of elements along a given axis"""

y = ny.array([[1, 2, 3, 4, 6], [5, 6, 7, 8, 6]])
 
print(ny.size(y))

"""Trim the leading and/or trailing zeros from a 1-D array"""

y = ny.array((0, 0, 0, 0, 1, 5, 7, 0, 6, 2, 9, 0, 10, 0, 0))

yrest = ny.trim_zeros(y)
print(yrest)

"""Change data type of given numpy array"""

y = ny.array([10, 20, 30, 40, 50])
print(y)
print(y.dtype)
print("\n")
yf = y.astype('float64')
print(yf)
print(yf.dtype)

"""Reverse a numpy array"""

y = ny.flip(y)
print(y)

"""How to make a NumPy array read-only?"""

y.flags.writeable = False

"""# ***NumPy Matrix***

Get the maximum value from given matrix
"""

y = ny.random.randint(10, size=(4,5))
print(y)
max_value = ny.max(y)
print(max_value)

"""Get the minimum value from given matrix"""

min_value = ny.min(y)
print(min_value)

"""Find the number of rows and columns of a given matrix using NumPy"""

ny.shape(y)

"""Select the elements from a given matrix"""

y = ny.select([y%2==0], [y])

print('Selecionar os elementos pares de m1')
print(y)

"""Find the sum of values in a matrix"""

ny.sum(y)

"""Calculate the sum of the diagonal elements of a NumPy array"""

ny.trace(y)

"""Adding and Subtracting Matrices in Python"""

y1 = ny.random.randint(10, size=(4,5))
y2 = ny.random.randint(10, size=(4,5))
print("soma:\n")
s = y1 + y2
print(s)
print("\n")
print("subtração:\n")
sub = y1 - y2
print(sub)

"""Ways to add row/columns in numpy array"""

ini_array = ny.array([[1, 2, 3], [45, 4, 7], [9, 6, 10]])
 

print("initial_array : ", str(ini_array));
 
column_to_be_added = ny.array([[1], [2], [3]])
 
# Adding column to array using append() method
arr = ny.append(ini_array, column_to_be_added, axis=1)
 
# printing result
print ("resultant array", str(arr))

"""Matrix Multiplication in NumPy"""

y1 = ny.random.randint(10, size=(4,4))
y2 = ny.random.randint(10, size=(4,4))
mult = y1 @ y2
print(mult)

"""Get the eigen values of a matrix"""

eigen = ny.linalg.eigvals(y1)

print(eigen)

"""How to Calculate the determinant of a matrix using NumPy?"""

ny.linalg.det(y1)

"""How to inverse a matrix using NumPy"""

ny.linalg.inv(y1)

"""How to count the frequency of unique values in NumPy array?"""

unique, counts = ny.unique(ny.array(y1), return_counts=True)
freq = ny.asarray((unique, counts)).T

print(freq)

"""Multiply matrices of complex numbers using NumPy in Python"""

x = ny.random.random((6, 6)).astype('complex')
y = ny.random.random((6, 6)).astype('complex')
multiplix = x @ y

print('x:\n', x)
print('\ny:\n', y)
print('\nx * y:\n', multiplix)

"""Compute the outer product of two given vectors using NumPy in Python"""

y1 = ny.array([5,4])
y2 = ny.array([6,7])
print("Original:")
print(y1)
print(y2)
  

print("Outer Product:")
resultado = ny.outer(y1, y2)
print(resultado)

"""Calculate inner, outer, and cross products of matrices and vectors using NumPy"""

a = ny.array([6, 6])
b = ny.array([3, 6])
print("Vectors :")
print("a = ", a)
print("\nb = ", b)
  

print("\nInner product of vectors a and b =")
print(ny.inner(a, b))
  
print("---------------------------------------")
  

x = ny.array([[5, 8, 1], [33, 62, 89]])
y = ny.array([[1, 15, 8], [1, 3, 5]])
print("\nMatrices :")
print("x =", x)
print("\ny =", y)
  

print("\nInner product of matrices x and y =")
print(ny.inner(x, y))

"""Compute the covariance matrix of two given NumPy arrays"""

y1 = ny.array([6, 3, 1])
y2 = ny.array([1, 2, 1])
  
# Original array1
print(y1)
  
# Original array2
print(y2)
  
# Covariance matrix
print("\nCovariance matrix of the said arrays:\n",
      ny.cov(y1, y2))

"""Convert covariance matrix to correlation matrix using Python"""

y1 = ny.array([6, 3, 1])
y2 = ny.array([1, 2, 1])
  
# Original array1
print(y1)
  
# Original array2
print(y2)
  
# Covariance matrix
print("\nCovariance matrix of the said arrays:\n",
      ny.corrcoef(y1, y2))

"""Compute the Kronecker product of two mulitdimension NumPy arrays"""

ny.kron(y1, y2)

"""Convert the matrix into a list"""

ny.ravel(y1)

"""# ***NumPy Indexing***

Replace NumPy array elements that doesn’t satisfy the given condition
"""

ay = ny.array([[73, 40, 60], [4, 40, 86], [66, 40, 3]])
print("Given array:")
print(ay)
  
print("\nReplace all elements of array which are greater than 40. to 16")
ay[ay > 40] = 16
print("\n")
print(ay)

"""Return the indices of elements where the given condition is satisfied"""

row, col = ny.where(ay>40)  
ay = ny.asarray((row, col)).T
print(ay)

"""Replace NaN values with average of columns"""

y = ny.array([[3, ny.nan, 2], [8, 22, ny.nan], [1, 3, 5]])
print ("matrix original\n", y)
  

indices = ny.where(ny.isnan(y))
  

yn = ny.where(ny.isnan(y), ny.ma.array(y, mask = ny.isnan(y)).mean(axis = 0), y)

print ("matrix nova\n", yn)

"""Replace negative value with zero in numpy array"""

y = ny.array([6, 6, -6, 6, -6, -6])
  
print("array inicial:\n", y)
  
y[y<0] = 0
  
print("novo array:\n ", y)

"""How to get values of an NumPy array at certain index positions?"""

print(y[4]) #posição 4 (index)

"""Find indices of elements equal to zero in a NumPy array"""

y = ny.array([1, 0, 2, 0, 3, 0, 0, 5, 6, 7, 5, 0, 8])
  
print(y)
print("\n")

print("matriz nova com os 0's eliminados:")
res = ny.where(y == 0)[0]
print(res)

"""How to Remove columns in Numpy array that contains non-numeric values?"""

n_arr = ny.array([[10.5, 22.5, 3.8],
                  [41, ny.nan, ny.nan]])
  
print("Given array:")
print(n_arr)
  
print("\nRemove all rows containing non-numeric elements")
print(n_arr[~ny.isnan(n_arr).any(axis=1)])

"""How to access different rows of a multidimensional NumPy array?"""

y = ny.array([[10, 20, 30], 
                [40, 5, 66], 
                [70, 88, 94]])
  
print("Given Array :")
print(y)
  

resy = y[[0,2]]
print("\nAccessed Rows :")
print(resy)

"""Get row numbers of NumPy array having element larger than X"""

arr = ny.array([[1, 2, 3, 4, 5],
                  [10, -3, 30, 4, 5],
                  [3, 2, 5, -4, 5],
                  [9, 7, 3, 6, 5] 
                 ])
  
# declare specified value
X = 6
  
# view array
print("Given Array:\n", arr)
  
# finding out the row numbers
output  = ny.where(ny.any(arr > X,
                                axis = 1))
  
# view output
print("Result:\n", output)

"""Get filled the diagonals of NumPy array"""

array = ny.array([[8, 3], [4, 9]])
ny.fill_diagonal(array, 6)
  
print(array)

"""Check elements present in the NumPy array"""

# creating a Numpy array
n_array = ny.array([[2, 3, 0],
                    [4, 1, 6]])
  
print("Given array:")
print(n_array)
  
# Checking whether specific values
# are present in "n_array" or not
print(2 in n_array)
print(0 in n_array)
print(6 in n_array)
print(50 in n_array)
print(10 in n_array)

"""# ***NumPy Linear Algebra***

Find a matrix or vector norm using NumPy
"""

y = ny.arange(6)
 

y_normal = ny.linalg.norm(y)
 
print("Vetor normal:")
print(y_normal)

"""Calculate the QR decomposition of a given matrix using NumPy"""

y1 = ny.array([[6, 2, 1], [2, 7, 9]])
print(y1)
  

e, v = ny.linalg.qr(y1)
print('\nE:\n', e)
print('\nV:\n', v)

"""Compute the condition number of a given matrix using NumPy"""

y = ny.array([[5, 6], [7, 2]])
  
print("Matrix original:")
print(y)
  

resultado =  ny.linalg.cond(y)
  
print("Condition number:")
print(resultado)

"""Compute the eigenvalues and right eigenvectors of a given square array using NumPy?"""

y = ny.array([[4, 3],
              [7, 2]])
  
print("Array original:\n", y)

e, r = ny.linalg.eig(y)
  

print("Eigenvalues  array:\n", e)
  

print("Right eigenvectors array:\n", r)

"""Calculate the Euclidean distance using NumPy"""

y1 = ny.array((2, 6, 8))
y2 = ny.array((4, 9, 5))
 

distancia = ny.linalg.norm(y1 - y2)
 

print(distancia)

"""# ***NumPy Random***

Create a Numpy array with random values
"""

ny.random.rand(6,6)

"""How to choose elements from the list with different probability using NumPy?"""

y_list = [10, 20, 30, 40, 50, 60, 70, 80, 90]
  
y_number = ny.random.choice(y_list)
  
print(y_number)

"""How to get weighted random choice in Python?"""

import random
y_List = [100, 200, 300, 400, 500, 600, 700, 800]
y_randomList = random.choices(y_List, weights=(10, 20, 30, 40, 50, 60 ,70 ,80), k=8)
  
print(y_randomList)

"""Generate Random Numbers From The Uniform Distribution using NumPy"""

y = ny.random.uniform(size=6)

print(y)

"""Get Random Elements form geometric distribution"""

import matplotlib.pyplot as plt
  
# Using geometric() method
y = ny.random.geometric(0.6, 1000)
  
count, bins, ignored = plt.hist(y, 50, density = True)
plt.show()

"""Get Random elements from Laplace distribution"""

import matplotlib.pyplot as plt
  
y = ny.random.laplace(1, 6, 1000)
  
count, bins, ignored = plt.hist(y, 70, density = True)
plt.show()

"""Return a Matrix of random values from a uniform distribution"""

import numpy.matlib
  
y_maty = ny.matlib.rand((6, 6)) 
print ("Saida : ", y_maty)

"""Return a Matrix of random values from a Gaussian distribution"""

import matplotlib.pyplot as plt
mu, sigma = 0, 0.1 # mean and standard deviation
s = ny.random.normal(mu, sigma, 1000)
count, bins, ignored = plt.hist(s, 30, density=True)
plt.plot(bins, 1/(sigma * ny.sqrt(2 * ny.pi)) *
               ny.exp( - (bins - mu)**2 / (2 * sigma**2) ),
         linewidth=2, color='r')
plt.show()

"""# ***NumPy Sorting and Searching***

How to get the indices of the sorted array using NumPy in Python?
"""

y = ny.array([10, 52, 62, 16, 16, 54, 453])
print("array original:\n", y)
  
print("indices sortidos:")
ind = ny.argsort(y)
print(ind)

"""Finding the k smallest values of a NumPy array"""

y = ny.array([22, 2, 11, 53, 4, 75, 6, 76, 36, 80])
print("Array origianal")
print(y)
  

k = 6
y1 = ny.sort(y)
  
print(k, "menos elemento do array")
print(y1[:k])

"""How to get the n-largest values of an array using NumPy?"""

arr = ny.array([2, 0,  1, 5,
                4, 1, 9])
  
print("Given array:", arr)
  

sorted_index_array = ny.argsort(arr)
  

sorted_array = arr[sorted_index_array]
  
print("Sorted array:", sorted_array)
  

n = 1
  


rslt = sorted_array[-n : ]
  

print("{} largest value:".format(n),
      rslt[0])

"""Sort the values in a matrix"""

SIZE = 10
 

def sortMat(mat, n) :
     
  
    temp = [0] * (n * n)
    k = 0
 

    for i in range(0, n) :
         
        for j in range(0, n) :
             
            temp[k] = mat[i][j]
            k += 1
 
  
    temp.sort()
     

    k = 0
     
    for i in range(0, n) :
         
        for j in range(0, n) :
            mat[i][j] = temp[k]
            k += 1
 
 

def printMat(mat, n) :
     
    for i in range(0, n) :
         
        for j in range( 0, n ) :
             
            print(mat[i][j] , end = " ")
             
        print()
     
     

mat = [ [ 5, 4, 7 ],
        [ 1, 3, 8 ],
        [ 2, 9, 6 ] ]
n = 3
 
print( "Original Matrix:")
printMat(mat, n)
 
sortMat(mat, n)
 
print("\nMatrix After Sorting:")
printMat(mat, n)

"""Filter out integers from float numpy array"""

y_array = ny.array([4.0, 2.2, 1.2, 6.0, 7.3, 9.0])
 
print ("array inicial : ", str(y_array))
 
resultado = y_array[y_array != y_array.astype(int)]
 

print ("array final", resultado)

"""Find the indices into a sorted array"""

y = ny.array([7, 3, 6, 8, 1])
y_index = ny.argsort(y)
print(y_index)

"""# ***NumPy Mathematics***"""

y1 = ny.array([5, 1, 7])
y2 = ny.array([2, 9, 6])

"""How to get element-wise true division of an array using Numpy?"""

y = ny.true_divide(y1, y2)
print(y)

"""How to calculate the element-wise absolute value of NumPy array?"""

ny.abs(y1)

"""Compute the negative of the NumPy array"""

ny.negative(y1)

"""Multiply 2d numpy array corresponding to 1d array"""

x1 = ny.array([[5, 8, 1], [3, 6, 8], [-2, -3, -7]])
x2 = ny.array([[5, 6, 2], [7, 4, 1], [6, -3, 0]])

y = y1 * x1[:, ny.newaxis]
print(y)

"""Computes the inner product of two arrays"""

ny.inner(y1, y2)

"""Compute the nth percentile of the NumPy array"""

ny.percentile(y1, q=70)

"""Calculate the n-th order discrete difference along the given axis"""

y = ny.diff(y1, axis=0)
print(y,'\n')
y = ny.diff(y1, axis=1)
print(y)

"""Calculate the sum of all columns in a 2D NumPy array"""

ny.sum(y1, axis=0)

"""Calculate average values of two given NumPy arrays"""

xx = (y1 + y2) / 2
print(xx)

"""How to compute numerical negative value for all elements in a given NumPy array?"""

ny.negative(y1)

"""How to get the floor, ceiling and truncated values of the elements of a numpy array?"""

y = ny.array([[3.4, 2.7], [9.2, -6.2]])
flo = ny.floor(y)
cei = ny.ceil(y)
trun = ny.trunc(y)

print(flo, '\n\n', cei, '\n\n', trun)

"""How to round elements of the NumPy array to the nearest integer?"""

ny.round(y)

"""Find the round off the values of the given matrix"""

y.round()

"""Determine the positive square-root of an array"""

ny.sqrt(ny.positive(y))

"""Evaluate Einstein’s summation convention of two multidimensional NumPy arrays"""

ny.einsum('mk,kn', x1, x2)

"""# ***NumPy Statistics***

Compute the median of the flattened NumPy array
"""

y = ny.array([8, 6, 2, 1, 9, 3, 2])
print("\narray Original:")
print(y)
  
ymed = ny.median(y)
print("\nMedian of the array that contains \
odd no of elements:")
print(ymed)

"""Find Mean of a List of Numpy Array"""

# List Initialization
y = [ny.array([2, 6, 1]),
         ny.array([40, 15, 2]),
         ny.array([1, 1, 1])]
  
# Output list initialization
Output = []
  
# using np.mean()
for i in range(len(y)):
   Output.append(ny.mean(y[i]))
  
# Printing output
print(Output)

"""Calculate the mean of array ignoring the NaN value"""

y = ny.array([[2, 5, 7], [7, 3, ny.nan]])
   
print("Shape:", y.shape)
   
print("Mean of array without using nanmean function:",
                                           ny.mean(y))
   
print("Using nanmean function:", ny.nanmean(y))

"""Get the mean value from given matrix"""

y = ny.array([[2, 5, 7], [7, 3, 5]])
ny.mean(y)

"""Compute the variance of the NumPy array"""

y = ny.array([[2, 5, 7], [7, 3, 5]])
ny.var(y)

"""Compute the standard deviation of the NumPy array"""

y = ny.array([[2, 5, 7], [7, 3, 5]])
ny.std(y)

"""Compute pearson product-moment correlation coefficients of two given NumPy arrays"""

y1 = ny.array([8, 6, 1])
y2 = ny.array([6, 2, 5])
  

resultado = ny.corrcoef(y1, y2)
  
print(resultado)

"""Calculate the mean across dimension in a 2D NumPy array"""

arr = ny.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
  

row_mean = ny.mean(arr, axis=1)
  
row1_mean = row_mean[0]
print("Mean of Row 1 is", row1_mean)
  
row2_mean = row_mean[1]
print("Mean of Row 2 is", row2_mean)
  
row3_mean = row_mean[2]
print("Mean of Row 3 is", row3_mean)
  
  

column_mean = ny.mean(arr, axis=0)
  
column1_mean = column_mean[0]
print("Mean of column 1 is", column1_mean)
  
column2_mean = column_mean[1]
print("Mean of column 2 is", column2_mean)
  
column3_mean = column_mean[2]
print("Mean of column 3 is", column3_mean)

"""Calculate the average, variance and standard deviation in Python using NumPy"""

lis = [1, 6, 3, 4, 8, 3, 6, 4]
 
print(ny.average(lis))
print("\n")
print(ny.var(lis))
print("\n")
print(ny.std(lis))

"""Describe a NumPy Array in Python"""

arr = ny.array([3, 1, 6, 8, 2, 3,
                4, 6, 3, 7, 1])
 
# measures of dispersion
min = ny.amin(arr)
max = ny.amax(arr)
range = ny.ptp(arr)
variance = ny.var(arr)
sd = ny.std(arr)
 
print("Array =", arr)
print("Measures of Dispersion")
print("Minimum =", min)
print("Maximum =", max)
print("Range =", range)
print("Variance =", variance)
print("Standard Deviation =", sd)

"""# ***NumPy Polynomial***

Define a polynomial function
"""

px = ny.poly1d([6,-3, 1])
qx = ny.poly1d([8,-5,3])
print(px)
print(qx)

"""How to add one polynomial to another using NumPy in Python?"""

rx = ny.polynomial.polynomial.polyadd(px,qx)
  
print(rx)

"""How to subtract one polynomial to another using NumPy in Python?"""

rx = ny.polynomial.polynomial.polysub(px,qx)
  
print(rx)

"""How to multiply a polynomial to another using NumPy in Python?"""

rx = ny.polynomial.polynomial.polymul(px,qx)
  
print(rx)

"""How to divide a polynomial to another using NumPy in Python?"""

gx, rx = ny.polynomial.polynomial.polydiv(px,qx)
  
print(gx)
print(rx)

"""Find the roots of the polynomials using NumPy"""

roots = [2, 6, -4]
print(ny.roots(roots))

"""Evaluate a 2-D polynomial series on the Cartesian product"""

y = ny.array([[6, 2], [5, 8]])
d = ny.polynomial.polynomial.polygrid2d([1,2],[1,2], y)
print(d)

"""Evaluate a 3-D polynomial series on the Cartesian product"""

y = ny.arange(8).reshape(2, 2, 2)
d = ny.polynomial.polynomial.polygrid3d([1,2],[1,2], [1,2], y)
print(d)

"""# ***NumPy Strings***

Repeat all the elements of a NumPy array of strings
"""

y = ny.array(['oi', 'tchau', 'alo', 'bye', 'oxe'])
print(y)
print("\n")

yreap = ny.char.multiply(y, 6)
print(yreap)

"""How to split the element of a given NumPy array with spaces?"""

ya = ny.array('oi tchau bye oxe')
ysepa = ny.char.split(ya)
print(ysepa)

"""How to insert a space between characters of all the elements of a given NumPy array?"""

yinsert = ny.char.join(' ', y)
print(yinsert)

"""Find the length of each string element in the Numpy array"""

ytamanho = ny.char.str_len(y)
print(ytamanho)

"""Swap the case of an array of string"""

ymin = ny.char.swapcase(y)
print(ymin)

"""Change the case to uppercase of elements of an array"""

ymai = ny.char.upper(y)
print(ymai)

"""Change the case to lowercase of elements of an array"""

yminu = ny.char.lower(y)
print(yminu)

"""Join String by a seperator"""

separray = ny.array([','])
ysepara= ny.char.join(separray, y)
print(ysepara)

"""Check if two same shaped string arrayss one by one"""

ny.array_equal(y, yminu)

"""Count the number of substrings in an array"""

count= ny.char.count(y, 'ch')
print(count)

"""Find the lowest index of the substring in an array"""

index = ny.char.find(y, 'ch').argmin()
print(index)

"""Get the boolean array when values end with a particular character"""

y = ny.char.endswith(y, 'ch')
print(y)

"""# ***More Questions on NumPy***

Different ways to convert a Python dictionary to a NumPy array
"""



"""How to convert a list and tuple into NumPy arrays?"""

# list
l1 = [6, 2, 1, 9]
print(type(l1))
print(l1)
print()
  
# conversion
y = ny.asarray(l1)
print(type(y))
print(y)
print()
  
# tuple
t1 = ([6, 2, 3], [1, 6, 3])
print(type(t1))
print(t1)
print()
  
# conversion
y2 = ny.asarray(t1)
print(type(y2))
print(y2)

"""Ways to convert array of strings to array of floats"""

x=ny.array(['1.1', '2.2', '3.3'])
x=ny.asfarray(x,float)
print(x)

"""Convert a NumPy array into a csv file"""

import pandas as pd
arr = ny.arange(1,11).reshape(2,5)
  
# display the array
print(arr)
  
# convert array into dataframe
DF = pd.DataFrame(arr)
  
# save the dataframe as a csv file
DF.to_csv("data1.csv")

"""How to Convert an image to NumPy array and save it to CSV file using Python?"""

from PIL import Image
 
# read an image
img = Image.open('alguma.png')
 
# convert image object into array
imageToMatrice = ny.asarray(img)
 
# printing shape of image
print(imageToMatrice.shape)

"""How to save a NumPy array to a text file?"""

List = [6, 2, 8, 3, 8]
y = ny.array(List)
 

print('Array:\n', y)
file = open("file1.txt", "w+")
 

content = str(y)
file.write(content)
file.close()
 

file = open("file1.txt", "r")
content = file.read()
 
print("\nContent in file1.txt:\n", content)
file.close()

"""Load data from a text file"""

File_data = ny.loadtxt("file3.txt", dtype=int)
print(File_data)

"""Plot line graph from NumPy array"""

import matplotlib.pyplot as plt
 

x = ny.arange(1, 20)
y = x * x
 
# plotting
plt.title("Linha")
plt.xlabel("X")
plt.ylabel("Y")
plt.plot(x, y, color ="brown")
plt.show()

"""Create Histogram using NumPy"""

from matplotlib import pyplot as plt
 

a = ny.random.randint(150, size =(150))
 

fig = plt.figure(figsize =(10, 10))
 
plt.hist(a, bins = [0, 10, 20, 30,
                    40, 50, 60, 70,
                    80, 90, 100])
 
plt.title("Histogram")
 
# show plot
plt.show()